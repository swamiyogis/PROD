name: Build Flutter Web

on:

  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      artifact-name: Output

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.15.0

      - name: Build Node
        run: |
          npm i
          npm run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Output
          path: dist/

  push-to-dev-repo:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: Output
          path: website

      - name: Set up Git config
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Clone target repo main branch
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git clone --branch main https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ secrets.MY_ORG }}/${{ secrets.TARGET_REPO }}.git target-repo

      - name: Copy build output to target repo (replace contents without deleting)
        run: |
          NEW_BRANCH="web-release-${{ github.run_number }}"
          cd target-repo
          git fetch origin
          git checkout main
          git pull origin main
          if git rev-parse --verify "$NEW_BRANCH"; then
            git branch -D "$NEW_BRANCH"
          fi
          git checkout -b "$NEW_BRANCH"
          cd ..
          rm -rf target-repo/website/*
          cp -r website/* target-repo/website/
          cd target-repo
          git add .
          git commit -m "Update Flutter web build output (run ${{ github.run_number }})"
          git push origin "$NEW_BRANCH"
        shell: bash


      - name: Authenticate with GitHub CLI
        run: gh auth login --with-token <<< "${{ secrets.GH_PAT }}"

      - name: Create PR and export URL
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          PR_URL=$(gh pr create --repo ${{ secrets.MY_ORG }}/${{ secrets.TARGET_REPO }} --base main --head web-release-${{ github.run_number }} --title "Deploy Flutter Web Build - Run #${{ github.run_number }}" --body "This PR contains the Flutter Web build artifacts.")
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV

      - uses: actions/checkout@v4
      - name: Wait and squash merge PR
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          PR_URL: ${{ env.PR_URL }}
        run: |
          PR_NUMBER=$(basename "$PR_URL")
          MAX_RETRIES=20
          SLEEP_SECONDS=15
          for i in $(seq 1 $MAX_RETRIES); do
            MERGEABLE_STATE=$(gh pr view "$PR_NUMBER" --repo ${{ secrets.MY_ORG }}/${{ secrets.TARGET_REPO }} --json mergeable --template '{{.mergeable}}')
            if [ "$MERGEABLE_STATE" = "MERGEABLE" ]; then
              gh pr merge "$PR_NUMBER" --repo ${{ secrets.MY_ORG }}/${{ secrets.TARGET_REPO }} --squash
              exit 0
            elif [ "$MERGEABLE_STATE" = "CONFLICTING" ]; then
              echo "PR has conflicts; cannot merge."
              exit 1
            fi
            sleep $SLEEP_SECONDS
          done
          echo "Timed out waiting for PR to become mergeable."
          exit 1